{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"subpatch: fearless multi-repository management - stay relaxed!","text":"<p>Welcome to the website of subpatch. The tool that does multi-repository management right. Don't worry, stay relaxed!</p> <p>Currently this project is just an idea. No code yet. But the general concept is already proven and works!</p> <p>The subpatch project will provide two things:</p> <ul> <li>A command line tool called <code>subpatch</code> to manage subprojects (in a monorepo). The github   repo is subpatch.</li> <li>Documentation, explanations and opinions about multi repo setups and   management. This is this website.</li> </ul> <p>If you are currently using git-submodules or repo and you are frustrated, <code>subpatch</code>  will be mostly your solution! If you are interested, email me.</p>"},{"location":"#subpatch-usecases","title":"subpatch usecases","text":"<p>subpatch is interesting for you if you want to do the following tasks:</p> <ul> <li>assemble a monorepo from multiple repositories</li> <li>integrate third party dependencies into your project as source files</li> <li>maintain a local fork (=linear patchstack) of a third party dependency</li> </ul>"},{"location":"#subpatchs-concept","title":"subpatch's concept","text":"<p>subpatch will be a subprojects management tool based on the following ideas:</p> <ul> <li>It's based on the idea of monorepos. The files of subprojects are added as   normal files to the superproject.  In most cases this will be just a git   repository.</li> <li>The metadata of a subproject is saved in a git-config styled configuration file.</li> <li>Modifications of the subproject are possible and subpatch helps to maintain   a linear patch stack of the modifications.</li> <li>Importing new versions of the subproject is possible and subpatch helps to   rebase the local modifications.</li> </ul>"},{"location":"#subpatch-main-difference","title":"subpatch main difference","text":"<p>subpatch is based on the concept of monorepos. When you use subpatch the subprojects are not git repository itself. The files of the subprojects are added as files to the superproject. You will only have to deal with a single git repository.</p> <p>This is in contrast to other tools, e.g.</p> <ul> <li>git-submodules</li> <li>repo</li> <li>kas</li> <li>west</li> </ul> <p>These tools manage multi git repository management and try to combine them into a big superproject.</p>"},{"location":"imprint/","title":"Imprint","text":"<p>This website is created and maintained by</p> <ul> <li>name: Stefan Lengfeld</li> <li>address: Germany, 53721 Siegburg</li> <li>e-mail: stefan+subpatch@lengfeld.xyz</li> </ul> <p>The website's source is available at subpatch-website.</p>"},{"location":"ref/glossary/","title":"Glossary","text":"<p>This page is a glossary. More important terms are at the top.</p>"},{"location":"ref/glossary/#superproject","title":"superproject","text":"<p>The superproject is the parent project in a multi repository setup. It's often a git repository itself, e.g. for <code>git submodule</code>. When using subpatch the superproject has the configuration file <code>.subpatch</code> at its top level directory.</p>"},{"location":"ref/glossary/#subproject","title":"subproject","text":"<p>The subproject or subprojects are the external projects, often called third party dependencies, that are added to the superproject.</p> <p>Note: The terms super- and sub-projects are always relative to a specific project setup. It might be the case that the superproject of a project (e.g. a C library with third party dependencies) is the subproject of another project (e.g. a C++ application, using the library).</p>"},{"location":"tut/basic-usage/","title":"Basic usage","text":"<p>This tutorial explains how to add a third party dependency with subpatch to a git repository.</p> <p>In this tutorial the superproject is a simple C-library project that contains a function that adds two numbers. The subproject (=third party dependency) is the GoogleTest test library for C and C++ projects.</p>"},{"location":"tut/basic-usage/#prerequisites","title":"Prerequisites","text":"<p>To follow the tutorial you need the following setup</p> <ul> <li>Basic knowledge of git and the command line</li> <li>git installed</li> <li>subpatch installed (See Installation for the details)</li> <li>(optional) cmake and a c/c++ compiler installed</li> </ul>"},{"location":"tut/basic-usage/#cloning-the-example-repository","title":"Cloning the example repository","text":"<p>First you need to clone the example repository. It's the superproject that contains minimal C library . On the command line execute</p> <pre><code>$ git clone https://github.com/lengfeld/subpatch-example0\n$ cd subpatch-example0\n</code></pre> <p>If interested, have a look at the <code>README.md</code> file.</p>"},{"location":"tut/basic-usage/#optional-buliding-the-c-project","title":"(optional) Buliding the C project","text":"<p>If you want, you can also build the C library and test the example program. You need cmake and a c/c++ compiler for that. Execute the commands</p> <pre><code>$ cmake -B build .\n$ cmake --build build\n$ build/prog 9 7\n16\n</code></pre>"},{"location":"tut/basic-usage/#adding-the-third-party-dependency","title":"Adding the third party dependency","text":"<p>The example project contains the file <code>test.cc</code>. It is currently unused, because the GoogleTest dependency is missing. You will add it shortly.</p> <p>As a good practice you should add all third party dependencies in a subfolder called <code>external</code>. To add the dependency execute the commands</p> <pre><code>$ mkdir external\n$ cd external\n$ subpatch add https://github.com/google/googletest\n</code></pre> <p>The last command will take some seconds. It downloads the git repository and extract the files. When it's finished it will print the message</p> <pre><code>Adding subproject 'googletest' was successful.\n- To inspect the changes, use `git status` and `git diff --staged`.\n- If you want to keep the changes, commit them with `git commit`.\n- If you want to revert the changes, execute 'git reset --merge`.\n</code></pre> <p>The message contains three different options. To see what subpatch added to the git index, execute</p> <pre><code>$ git status\n</code></pre> <p>There are around 240 new files. Commit them by executing</p> <pre><code>$ cd ..\n$ git commit -m \"external: Adding GooglTest dependency\"\n</code></pre> <p>Info: Apart from the files of the third party dependency subpatch also adds some metadata to the superproject. You can find it a the root directory of the git repository in the file <code>.subpatch</code>. For this tutorial the content looks like</p> <pre><code>[subpatch \"external/googletest\"]\n    url = https://github.com/google/googletest\n</code></pre>"},{"location":"tut/basic-usage/#optional-enable-and-build-the-tests","title":"(optional) Enable and build the tests","text":"<p>After adding the GoogleTest dependency, you can build and execute the tests. Open the <code>CMakeLists.txt</code> file and enable them. You can find the needed cmake configuration already in the file, just remove the comments. Now the last lines of the file should look like</p> <pre><code># Tests\nadd_subdirectory(external/googletest.git gtest)\nadd_executable(test test.cc)\ntarget_link_libraries(test GTest::gtest_main add)\ninclude(GoogleTest)\ngtest_discover_tests(test)\n</code></pre> <p>After that you can build and run the tests with</p> <pre><code>$ cmake --build build\n$ build/test\n</code></pre> <p>Executing the last command will perform all tests and show the test results. All tests should pass!</p>"},{"location":"tut/basic-usage/#congratulations","title":"Congratulations","text":"<p>Congratulations! You have added your first subproject with subpatch.</p>"},{"location":"tut/installation/","title":"Installation","text":"<p>This tutorial explains who to install subpatch on your computer.</p> <p>Currently there are two ways to install subpatch</p> <ol> <li>With pipx into your HOME directory</li> <li>As a standalone script into the PATH</li> </ol> <p>NOTE: subpatch is currently in a very very early stage. Do not use it in production environments!</p>"},{"location":"tut/installation/#prerequisites","title":"Prerequisites","text":"<p>tbd</p>"},{"location":"tut/installation/#with-pipx-into-your-home-directory","title":"With pipx into your HOME directory","text":"<p>tbd</p>"},{"location":"tut/installation/#as-a-standalone-script-into-the-path","title":"As a standalone script into the PATH","text":"<p>tbd</p>"}]}